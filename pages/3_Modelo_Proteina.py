import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import streamlit.components.v1 as components
import os

# Colores corporativos
CORPORATE_COLORS = {
    "verde_oscuro": "#1A494C",      # rgb(26,73,76)
    "verde_claro": "#94AF92",       # rgb(148,175,146)
    "verde_muy_claro": "#E6ECD8",   # rgb(230,236,216)
    "gris_neutro": "#C9C9C9"        # rgb(201,201,201)
}

st.set_page_config(
    page_title="Modelo de Prote√≠na - Soya Insights",
    page_icon="ü•ú",
    layout="wide"
)

st.title("ü•ú Modelo de Cambio de Prote√≠na Soluble en Funci√≥n del Da√±o del Grano")
st.markdown("---")

# Sidebar para par√°metros del modelo
st.sidebar.header("üîß Par√°metros del Modelo")
st.sidebar.subheader("Condiciones de Degradaci√≥n")

degradacion_max = st.sidebar.slider("Degradaci√≥n M√°xima (%)", 0, 100, 95, help="Degradaci√≥n m√°xima a simular")
proteina_base = st.sidebar.slider("Prote√≠na Base (%)", 35.0, 45.0, 40.0, step=0.5, 
                                 help="Contenido inicial de prote√≠na en el grano fresco")
factor_perdida_proteina = st.sidebar.slider("Factor de P√©rdida de Prote√≠na", 10.0, 25.0, 15.0, step=1.0,
                                           help="Sensibilidad de la p√©rdida de prote√≠na a la degradaci√≥n")

# Par√°metros adicionales del modelo
st.sidebar.subheader("Par√°metros Avanzados")
temperatura_proteina = st.sidebar.slider("Temperatura (¬∞C)", 15, 40, 25, help="Temperatura que afecta la prote√≠na")
factor_temp_proteina = st.sidebar.slider("Factor de Temperatura para Prote√≠na", 0.1, 1.0, 0.5, step=0.1,
                                        help="Efecto de la temperatura en la prote√≠na")
proteina_minima = st.sidebar.slider("Prote√≠na M√≠nima (%)", 20.0, 30.0, 25.0, step=0.5,
                                   help="Contenido m√≠nimo de prote√≠na despu√©s de degradaci√≥n")

# Calcular datos para gr√°ficos
# degradaciones = np.arange(0, degradacion_max/100 + 0.01, 0.01)
degradaciones = np.arange(0, degradacion_max + 0.01, 0.5)  # degradacion en %
proteinas = 70.828 - 0.225 * degradaciones

# Crear DataFrame para an√°lisis
df_proteina = pd.DataFrame({
    'Degradaci√≥n (%)': degradaciones,
    'Prote√≠na (%)': proteinas,
    'P√©rdida Prote√≠na (%)': 70.828 - proteinas
})

# ===== SECCI√ìN 1: EXPLICACI√ìN DEL MODELO =====
st.header("üî¨ Explicaci√≥n del Modelo de Prote√≠na")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    ### Ecuaci√≥n del Modelo de Prote√≠na
    
    El modelo de prote√≠na considera la p√©rdida de prote√≠na soluble por degradaci√≥n:
    
    **P(D) = P‚ÇÄ - ŒîP(D) √ó F‚Çú**
    
    Donde:
    - **P(D)**: Contenido de prote√≠na en funci√≥n de la degradaci√≥n
    - **P‚ÇÄ**: Contenido inicial de prote√≠na (%)
    - **ŒîP(D)**: P√©rdida de prote√≠na = D √ó Œ± √ó F‚Çú √ó (1 + D √ó Œ≤)
    - **D**: Porcentaje de degradaci√≥n (0-1)
    - **Œ±**: Factor de sensibilidad de p√©rdida de prote√≠na
    - **F‚Çú**: Factor de temperatura = 1 + (T - T‚ÇÄ) √ó Œ≥
    - **Œ≤**: Factor de aceleraci√≥n no lineal (0.5)
    - **T‚ÇÄ**: Temperatura de referencia (20¬∞C)
    - **Œ≥**: Sensibilidad a temperatura
    """)

with col2:
    st.info(f"""
    **Par√°metros Actuales:**
    
    - **Prote√≠na Base:** {proteina_base}%
    - **Factor P√©rdida:** {factor_perdida_proteina}
    - **Temperatura:** {temperatura_proteina}¬∞C
    - **Factor Temp:** {factor_temp_proteina}
    - **Prote√≠na M√≠n:** {proteina_minima}%
    """)

# ===== SECCI√ìN 2: DISTRIBUCIONES DE DATOS REALES =====
st.header("üìä Distribuciones de Datos Reales")

st.markdown("""
A continuaci√≥n se muestran las distribuciones de prote√≠na soluble y da√±o total de grano basadas en datos reales de laboratorio.
""")

# Ruta base de las gr√°ficas
plots_path = "models/plots"

# Distribuciones en 2 columnas
col1, col2 = st.columns(2)

with col1:
    st.subheader("**Distribuci√≥n de Soluble Protein (%)**")
    st.caption("Histograma de la distribuci√≥n de prote√≠na soluble en las muestras. La l√≠nea vertical indica el valor promedio observado.")
    components.html(open(os.path.join(plots_path, "soluble_protein_distribution.html")).read(), height=420)

with col2:
    st.subheader("**Distribuci√≥n de Total Grain Damage (%)**")
    st.caption("Histograma de la distribuci√≥n del da√±o total de grano en las muestras. La l√≠nea vertical indica el valor promedio observado.")
    components.html(open(os.path.join(plots_path, "grain_damage_distribution.html")).read(), height=420)

# ===== SECCI√ìN 3: CALCULADORA INTERACTIVA =====
st.header("üßÆ Calculadora de Prote√≠na")

col1, col2 = st.columns(2)

with col1:
    degradacion_calc = st.slider(
        "Degradaci√≥n del grano (%)",
        min_value=0.0,
        max_value=100.0,
        value=30.0,
        step=5.0,
        help="Selecciona el nivel de degradaci√≥n para calcular la prote√≠na"
    )
    
    # Usar la ecuaci√≥n lineal para el c√°lculo
    proteina_calculada = 70.828 - 0.225 * degradacion_calc
    perdida_calculada = 70.828 - proteina_calculada
    
    st.metric(
        label="Prote√≠na Calculada",
        value=f"{proteina_calculada:.1f}%",
        delta=f"-{perdida_calculada:.1f}%"
    )
    st.info(f"""
    **F√≥rmula utilizada:**
    Prote√≠na = 70.828 - 0.225 √ó Degradaci√≥n
    **C√°lculo actual:**
    Prote√≠na = 70.828 - 0.225 √ó {degradacion_calc} = {proteina_calculada:.1f}%
    """)

with col2:
    # Sem√°foro seg√∫n el rango de prote√≠na soluble (ecuaci√≥n lineal)
    if proteina_calculada > 80:
        st.success("üü• > 80% Torta Soya Cruda")
    elif 75 <= proteina_calculada <= 80:
        st.warning("üü© Entre 75% y 80% Torta Soya Cocida")
    else:
        st.error("üü® < 75% Torta Soya Muy Cocida")

# ===== SECCI√ìN 5: GR√ÅFICA DE DISPERSI√ìN DE PROTE√çNA SOLUBLE VS DA√ëO TOTAL DE GRANO =====
st.header("üìà Dispersi√≥n de Prote√≠na Soluble vs Da√±o Total de Grano (Datos Reales)")
st.caption("Esta gr√°fica muestra la dispersi√≥n real de los datos de laboratorio entre el da√±o total del grano y el porcentaje de prote√≠na soluble. Cada punto representa una muestra real.")
components.html(open(os.path.join(plots_path, "soluble_protein_vs_grain_damage.html")).read(), height=520)

# ===== SECCI√ìN 7: TABLA DE RESULTADOS =====
st.header("üìã Resultados Detallados")

# Crear tabla con puntos clave de degradaci√≥n
puntos_degradacion = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
resultados_proteina = []
for deg in puntos_degradacion:
    proteina = 70.828 - 0.225 * deg
    perdida = 70.828 - proteina
    if proteina > 80:
        calidad = "Torta Soya Cruda (>80%)"
        color = "üü•"
    elif 75 <= proteina <= 80:
        calidad = "Torta Soya Cocida (75-80%)"
        color = "üü©"
    else:
        calidad = "Torta Soya Muy Cocida (<75%)"
        color = "üü®"
    resultados_proteina.append({
        'Degradaci√≥n (%)': f"{deg:.0f}%",
        'Prote√≠na (%)': f"{proteina:.1f}%",
        'P√©rdida (%)': f"-{perdida:.1f}%",
        'Calidad': f"{color} {calidad}"
    })
df_resultados = pd.DataFrame(resultados_proteina)
st.dataframe(df_resultados, use_container_width=True)

# ===== SECCI√ìN 8: INTERPRETACI√ìN CIENT√çFICA =====
st.header("üß™ Interpretaci√≥n Cient√≠fica")

st.markdown("""
### Mecanismos de P√©rdida de Prote√≠na

1. **Desnaturalizaci√≥n T√©rmica**: Las prote√≠nas se desnaturalizan a temperaturas elevadas
2. **Degradaci√≥n Enzim√°tica**: Las proteasas naturales degradan las prote√≠nas
3. **Actividad Microbiana**: Microorganismos consumen prote√≠nas como fuente de energ√≠a
4. **Oxidaci√≥n de Prote√≠nas**: Los radicales libres oxidan amino√°cidos
5. **Reacciones de Maillard**: Reacciones entre prote√≠nas y az√∫cares reductores

### Factores que Afectan la Prote√≠na

- **Temperatura elevada**: Acelera desnaturalizaci√≥n y reacciones qu√≠micas
- **Humedad alta**: Favorece actividad enzim√°tica y microbiana
- **Tiempo de almacenamiento**: Acumulaci√≥n de efectos degradativos
- **Exposici√≥n al ox√≠geno**: Acelera oxidaci√≥n de prote√≠nas
- **Da√±o mec√°nico**: Facilita acceso de enzimas y microorganismos

### Est√°ndares de Calidad por Prote√≠na

- **‚â• 38%**: Calidad excelente, apto para prote√≠na aislada
- **35-38%**: Calidad buena, apto para concentrado de prote√≠na
- **30-35%**: Calidad moderada, apto para harina de soya
- **< 30%**: Calidad cr√≠tica, uso limitado

### Impacto en Productos Derivados

- **Prote√≠na aislada**: Requiere alto contenido de prote√≠na (>90% en base seca)
- **Concentrado de prote√≠na**: Requiere 65-90% de prote√≠na
- **Harina de soya**: Requiere 44-50% de prote√≠na
- **Alimentos funcionales**: P√©rdida de funcionalidad tecnol√≥gica
- **Suplementos nutricionales**: Reducci√≥n del valor nutricional
""")

# Footer
st.markdown("---")
st.markdown("*Modelo de Prote√≠na - Soya Insights*") 