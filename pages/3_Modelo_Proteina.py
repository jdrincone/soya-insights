import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

st.set_page_config(
    page_title="Modelo de Prote√≠na - Soya Insights",
    page_icon="ü•ú",
    layout="wide"
)

st.title("ü•ú Modelo de Cambio de Prote√≠na Soluble en Funci√≥n del Da√±o del Grano")
st.markdown("---")

# Sidebar para par√°metros del modelo
st.sidebar.header("üîß Par√°metros del Modelo")
st.sidebar.subheader("Condiciones de Degradaci√≥n")

degradacion_max = st.sidebar.slider("Degradaci√≥n M√°xima (%)", 0, 100, 95, help="Degradaci√≥n m√°xima a simular")
proteina_base = st.sidebar.slider("Prote√≠na Base (%)", 35.0, 45.0, 40.0, step=0.5, 
                                 help="Contenido inicial de prote√≠na en el grano fresco")
factor_perdida_proteina = st.sidebar.slider("Factor de P√©rdida de Prote√≠na", 10.0, 25.0, 15.0, step=1.0,
                                           help="Sensibilidad de la p√©rdida de prote√≠na a la degradaci√≥n")

# Par√°metros adicionales del modelo
st.sidebar.subheader("Par√°metros Avanzados")
temperatura_proteina = st.sidebar.slider("Temperatura (¬∞C)", 15, 40, 25, help="Temperatura que afecta la prote√≠na")
factor_temp_proteina = st.sidebar.slider("Factor de Temperatura para Prote√≠na", 0.1, 1.0, 0.5, step=0.1,
                                        help="Efecto de la temperatura en la prote√≠na")
proteina_minima = st.sidebar.slider("Prote√≠na M√≠nima (%)", 20.0, 30.0, 25.0, step=0.5,
                                   help="Contenido m√≠nimo de prote√≠na despu√©s de degradaci√≥n")

# Funci√≥n del modelo cient√≠fico de prote√≠na
def modelo_proteina_cientifico(degradacion, proteina_base, factor_perdida, temperatura, factor_temp, proteina_min):
    """
    Modelo cient√≠fico de cambio de prote√≠na soluble en funci√≥n de la degradaci√≥n del grano
    
    Par√°metros:
    - degradacion: porcentaje de degradaci√≥n (0-1)
    - proteina_base: contenido inicial de prote√≠na (%)
    - factor_perdida: sensibilidad de la p√©rdida de prote√≠na
    - temperatura: temperatura en ¬∞C
    - factor_temp: efecto de la temperatura en la prote√≠na
    - proteina_min: contenido m√≠nimo de prote√≠na (%)
    
    Retorna: contenido de prote√≠na (%)
    """
    # Temperatura de referencia
    temp_ref = 20
    
    # Factor de temperatura (efecto sobre la degradaci√≥n de prote√≠nas)
    factor_temp_efecto = 1 + (temperatura - temp_ref) * factor_temp * 0.01
    
    # P√©rdida de prote√≠na por degradaci√≥n (modelo no lineal)
    # La p√©rdida es m√°s r√°pida al inicio y se estabiliza
    perdida_proteina = degradacion * factor_perdida * factor_temp_efecto * (1 + degradacion * 0.5)
    
    # Prote√≠na total
    proteina_total = proteina_base - perdida_proteina
    
    # L√≠mite m√≠nimo de prote√≠na
    return max(proteina_total, proteina_min)

# Calcular datos para gr√°ficos
degradaciones = np.arange(0, degradacion_max/100 + 0.01, 0.01)
proteinas = [modelo_proteina_cientifico(deg, proteina_base, factor_perdida_proteina, temperatura_proteina, factor_temp_proteina, proteina_minima) 
            for deg in degradaciones]

# Crear DataFrame para an√°lisis
df_proteina = pd.DataFrame({
    'Degradaci√≥n (%)': [d * 100 for d in degradaciones],
    'Prote√≠na (%)': proteinas,
    'P√©rdida Prote√≠na (%)': [proteina_base - p for p in proteinas]
})

# ===== SECCI√ìN 1: EXPLICACI√ìN DEL MODELO =====
st.header("üî¨ Explicaci√≥n del Modelo de Prote√≠na")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    ### Ecuaci√≥n del Modelo de Prote√≠na
    
    El modelo de prote√≠na considera la p√©rdida de prote√≠na soluble por degradaci√≥n:
    
    **P(D) = P‚ÇÄ - ŒîP(D) √ó F‚Çú**
    
    Donde:
    - **P(D)**: Contenido de prote√≠na en funci√≥n de la degradaci√≥n
    - **P‚ÇÄ**: Contenido inicial de prote√≠na (%)
    - **ŒîP(D)**: P√©rdida de prote√≠na = D √ó Œ± √ó F‚Çú √ó (1 + D √ó Œ≤)
    - **D**: Porcentaje de degradaci√≥n (0-1)
    - **Œ±**: Factor de sensibilidad de p√©rdida de prote√≠na
    - **F‚Çú**: Factor de temperatura = 1 + (T - T‚ÇÄ) √ó Œ≥
    - **Œ≤**: Factor de aceleraci√≥n no lineal (0.5)
    - **T‚ÇÄ**: Temperatura de referencia (20¬∞C)
    - **Œ≥**: Sensibilidad a temperatura
    """)

with col2:
    st.info(f"""
    **Par√°metros Actuales:**
    
    - **Prote√≠na Base:** {proteina_base}%
    - **Factor P√©rdida:** {factor_perdida_proteina}
    - **Temperatura:** {temperatura_proteina}¬∞C
    - **Factor Temp:** {factor_temp_proteina}
    - **Prote√≠na M√≠n:** {proteina_minima}%
    """)

# ===== SECCI√ìN 2: GR√ÅFICOS DE PROTE√çNA =====
st.header("üìà Visualizaci√≥n del Modelo de Prote√≠na")

# Gr√°fico principal de prote√≠na
fig_proteina = go.Figure()

fig_proteina.add_trace(go.Scatter(
    x=df_proteina['Degradaci√≥n (%)'],
    y=df_proteina['Prote√≠na (%)'],
    mode='lines+markers',
    name='Prote√≠na Total',
    line=dict(color='green', width=3),
    fill='tonexty'
))

# Agregar l√≠nea de prote√≠na base
fig_proteina.add_hline(
    y=proteina_base, 
    line_dash="dash", 
    line_color="blue",
    annotation_text=f"Prote√≠na Base: {proteina_base}%"
)

# Agregar l√≠nea de prote√≠na m√≠nima
fig_proteina.add_hline(
    y=proteina_minima, 
    line_dash="dash", 
    line_color="red",
    annotation_text=f"Prote√≠na M√≠nima: {proteina_minima}%"
)

# Agregar zonas de calidad
fig_proteina.add_hrect(
    y0=proteina_minima, y1=35, 
    fillcolor="red", opacity=0.2,
    annotation_text="Calidad Cr√≠tica"
)
fig_proteina.add_hrect(
    y0=35, y1=38, 
    fillcolor="orange", opacity=0.2,
    annotation_text="Calidad Moderada"
)
fig_proteina.add_hrect(
    y0=38, y1=proteina_base, 
    fillcolor="green", opacity=0.2,
    annotation_text="Calidad Excelente"
)

fig_proteina.update_layout(
    title="Cambio de Prote√≠na Soluble en Funci√≥n de la Degradaci√≥n del Grano",
    xaxis_title="Degradaci√≥n (%)",
    yaxis_title="Prote√≠na (%)",
    height=500,
    hovermode='x unified'
)

st.plotly_chart(fig_proteina, use_container_width=True)

# ===== SECCI√ìN 3: AN√ÅLISIS DE SENSIBILIDAD =====
st.header("üîç An√°lisis de Sensibilidad")

col1, col2 = st.columns(2)

with col1:
    # Sensibilidad a temperatura
    temps = np.arange(15, 41, 5)
    proteina_temp = [modelo_proteina_cientifico(0.5, proteina_base, factor_perdida_proteina, t, factor_temp_proteina, proteina_minima) 
                    for t in temps]
    
    fig_temp = px.line(
        x=temps,
        y=proteina_temp,
        title="Sensibilidad a la Temperatura (50% degradaci√≥n)",
        labels={'x': 'Temperatura (¬∞C)', 'y': 'Prote√≠na (%)'}
    )
    fig_temp.update_traces(line_color='red', line_width=3)
    st.plotly_chart(fig_temp, use_container_width=True)

with col2:
    # Sensibilidad al factor de p√©rdida
    factores = np.arange(10.0, 25.1, 2.0)
    proteina_factor = [modelo_proteina_cientifico(0.5, proteina_base, f, temperatura_proteina, factor_temp_proteina, proteina_minima) 
                      for f in factores]
    
    fig_factor = px.line(
        x=factores,
        y=proteina_factor,
        title="Sensibilidad al Factor de P√©rdida (50% degradaci√≥n)",
        labels={'x': 'Factor de P√©rdida', 'y': 'Prote√≠na (%)'}
    )
    fig_factor.update_traces(line_color='purple', line_width=3)
    st.plotly_chart(fig_factor, use_container_width=True)

# ===== SECCI√ìN 4: TABLA DE RESULTADOS =====
st.header("üìã Resultados Detallados")

# Crear tabla con puntos clave de degradaci√≥n
puntos_degradacion = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
resultados_proteina = []

for deg in puntos_degradacion:
    proteina = modelo_proteina_cientifico(deg, proteina_base, factor_perdida_proteina, temperatura_proteina, factor_temp_proteina, proteina_minima)
    perdida = proteina_base - proteina
    
    # Determinar calidad basada en prote√≠na
    if proteina >= 38:
        calidad = "Excelente"
        color = "üü¢"
    elif proteina >= 35:
        calidad = "Buena"
        color = "üü°"
    elif proteina >= 30:
        calidad = "Moderada"
        color = "üü†"
    else:
        calidad = "Cr√≠tica"
        color = "üî¥"
    
    resultados_proteina.append({
        'Degradaci√≥n (%)': f"{deg * 100:.0f}%",
        'Prote√≠na (%)': f"{proteina:.1f}%",
        'P√©rdida (%)': f"-{perdida:.1f}%",
        'Calidad': f"{color} {calidad}"
    })

df_resultados = pd.DataFrame(resultados_proteina)
st.dataframe(df_resultados, use_container_width=True)

# ===== SECCI√ìN 5: INTERPRETACI√ìN CIENT√çFICA =====
st.header("üß™ Interpretaci√≥n Cient√≠fica")

st.markdown("""
### Mecanismos de P√©rdida de Prote√≠na

1. **Desnaturalizaci√≥n T√©rmica**: Las prote√≠nas se desnaturalizan a temperaturas elevadas
2. **Degradaci√≥n Enzim√°tica**: Las proteasas naturales degradan las prote√≠nas
3. **Actividad Microbiana**: Microorganismos consumen prote√≠nas como fuente de energ√≠a
4. **Oxidaci√≥n de Prote√≠nas**: Los radicales libres oxidan amino√°cidos
5. **Reacciones de Maillard**: Reacciones entre prote√≠nas y az√∫cares reductores

### Factores que Afectan la Prote√≠na

- **Temperatura elevada**: Acelera desnaturalizaci√≥n y reacciones qu√≠micas
- **Humedad alta**: Favorece actividad enzim√°tica y microbiana
- **Tiempo de almacenamiento**: Acumulaci√≥n de efectos degradativos
- **Exposici√≥n al ox√≠geno**: Acelera oxidaci√≥n de prote√≠nas
- **Da√±o mec√°nico**: Facilita acceso de enzimas y microorganismos

### Est√°ndares de Calidad por Prote√≠na

- **‚â• 38%**: Calidad excelente, apto para prote√≠na aislada
- **35-38%**: Calidad buena, apto para concentrado de prote√≠na
- **30-35%**: Calidad moderada, apto para harina de soya
- **< 30%**: Calidad cr√≠tica, uso limitado

### Impacto en Productos Derivados

- **Prote√≠na aislada**: Requiere alto contenido de prote√≠na (>90% en base seca)
- **Concentrado de prote√≠na**: Requiere 65-90% de prote√≠na
- **Harina de soya**: Requiere 44-50% de prote√≠na
- **Alimentos funcionales**: P√©rdida de funcionalidad tecnol√≥gica
- **Suplementos nutricionales**: Reducci√≥n del valor nutricional
""")

# ===== SECCI√ìN 6: CALCULADORA INTERACTIVA =====
st.header("üßÆ Calculadora de Prote√≠na")

col1, col2 = st.columns(2)

with col1:
    degradacion_calc = st.slider(
        "Degradaci√≥n del grano (%)",
        min_value=0.0,
        max_value=100.0,
        value=30.0,
        step=5.0,
        help="Selecciona el nivel de degradaci√≥n para calcular la prote√≠na"
    )
    
    proteina_calculada = modelo_proteina_cientifico(
        degradacion_calc/100, 
        proteina_base, 
        factor_perdida_proteina, 
        temperatura_proteina, 
        factor_temp_proteina, 
        proteina_minima
    )
    
    perdida_calculada = proteina_base - proteina_calculada
    
    st.metric(
        label="Prote√≠na Calculada",
        value=f"{proteina_calculada:.1f}%",
        delta=f"-{perdida_calculada:.1f}%"
    )

with col2:
    # Mostrar interpretaci√≥n de la prote√≠na calculada
    if proteina_calculada >= 38:
        st.success("‚úÖ **Calidad Excelente** - Apto para prote√≠na aislada")
    elif proteina_calculada >= 35:
        st.warning("‚ö†Ô∏è **Calidad Buena** - Apto para concentrado de prote√≠na")
    elif proteina_calculada >= 30:
        st.error("üö® **Calidad Moderada** - Apto para harina de soya")
    else:
        st.error("üö® **Calidad Cr√≠tica** - Uso limitado")

# Footer
st.markdown("---")
st.markdown("*Modelo de Prote√≠na - Soya Insights*") 