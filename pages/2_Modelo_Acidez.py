import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import streamlit.components.v1 as components
import os
import joblib
import json

# Colores corporativos
CORPORATE_COLORS = {
    "verde_oscuro": "#1A494C",      # rgb(26,73,76)
    "verde_claro": "#94AF92",       # rgb(148,175,146)
    "verde_muy_claro": "#E6ECD8",   # rgb(230,236,216)
    "gris_neutro": "#C9C9C9"        # rgb(201,201,201)
}

@st.cache_resource
def load_acidez_model():
    """Cargar el modelo de acidez"""
    try:
        model = joblib.load("models/artifacts/random_forest_acidez.pkl")
        with open("models/artifacts/metrics_acidez.json", "r") as f:
            metrics = json.load(f)
        with open("models/artifacts/model_info_acidez.json", "r") as f:
            model_info = json.load(f)
        return model, metrics, model_info
    except Exception as e:
        st.error(f"Error cargando modelo: {e}")
        return None, None, None

st.set_page_config(
    page_title="Modelo de Acidez - Soya Insights",
    page_icon="üß™",
    layout="wide"
)

st.title("üß™ Modelo de Cambio de Acidez en Funci√≥n del Da√±o del Grano")
st.markdown("---")

# ===== CALCULADORA PR√ÅCTICA =====
st.header("üßÆ Calculadora de Acidez")

# Cargar modelo ML
model, metrics, model_info = load_acidez_model()

if model is not None:
    # Obtener valor medio de acidez de los datos
    df_acidez_data = pd.read_csv("models/data/data_acidez.csv")
    acidez_media = df_acidez_data['pct_oil_acidez_mean'].mean()
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìä Ingrese los Valores de Da√±o")
        
        # Inputs para GDC y GDH
        gdc_input = st.number_input(
            "GDC - Da√±o T√©rmico (%)",
            min_value=0,
            max_value=100,
            value=30,
            step=1,
            help="Ingrese el porcentaje de da√±o t√©rmico observado"
        )
        
        gdh_input = st.number_input(
            "GDH - Da√±o por Hongos (%)",
            min_value=0,
            max_value=100,
            value=15,
            step=1,
            help="Ingrese el porcentaje de da√±o por hongos observado"
        )
        
        # Bot√≥n para calcular
        if st.button("üîç Calcular Acidez Esperada", type="primary"):
            # Hacer predicci√≥n
            data_input = pd.DataFrame({
                'gdc_mean_in': [gdc_input],
                'gdh_mean_in': [gdh_input]
            })
            
            acidez_predicha = model.predict(data_input)[0]
            diferencia_media = acidez_predicha - acidez_media
            porcentaje_cambio = (diferencia_media / acidez_media) * 100
            
            # Guardar en session state para mostrar en la columna derecha
            st.session_state.acidez_resultado = {
                'predicha': acidez_predicha,
                'media': acidez_media,
                'diferencia': diferencia_media,
                'porcentaje': porcentaje_cambio,
                'gdc': gdc_input,
                'gdh': gdh_input
            }
    
    with col2:
        st.subheader("üìà Resultado del An√°lisis")
        
        if 'acidez_resultado' in st.session_state:
            resultado = st.session_state.acidez_resultado
            
            # M√©trica principal
            st.metric(
                label="Acidez Esperada",
                value=f"{resultado['predicha']:.2f} mg KOH/g",
                delta=f"{resultado['diferencia']:+.2f} mg KOH/g"
            )
            
            # Comparaci√≥n con media
            st.markdown("**Comparaci√≥n con Valor Medio:**")
            st.markdown(f"- **Valor Medio:** {resultado['media']:.2f} mg KOH/g")
            st.markdown(f"- **Diferencia:** {resultado['diferencia']:+.2f} mg KOH/g")
            st.markdown(f"- **Cambio:** {resultado['porcentaje']:+.1f}%")
            
            # Interpretaci√≥n
            st.markdown("**Interpretaci√≥n:**")
            if resultado['diferencia'] > 0:
                st.warning(f"‚ö†Ô∏è **Por encima del promedio** (+{resultado['diferencia']:.2f} mg KOH/g)")
            elif resultado['diferencia'] < 0:
                st.success(f"‚úÖ **Por debajo del promedio** ({resultado['diferencia']:.2f} mg KOH/g)")
            else:
                st.info("‚ÑπÔ∏è **En el promedio**")
            
            # Calidad seg√∫n acidez
            if resultado['predicha'] < 1.0:
                st.success("üü¢ **Calidad Excelente**")
            elif resultado['predicha'] < 2.0:
                st.warning("üü° **Calidad Buena**")
            else:
                st.error("üî¥ **Calidad Cr√≠tica**")
            
            # Recomendaci√≥n
            st.markdown("**Recomendaci√≥n:**")
            if resultado['predicha'] > 3.0:
                st.error("üî¥ Revisar condiciones de almacenamiento y procesamiento")
            elif resultado['predicha'] > 2.0:
                st.warning("üü° Monitorear par√°metros de proceso")
            else:
                st.success("üü¢ Condiciones √≥ptimas mantenidas")
        
        else:
            st.info("üí° Ingrese valores y haga clic en 'Calcular' para ver el an√°lisis")
    
    # Explicaci√≥n y m√©tricas del modelo Random Forest en un expander
    import json
    try:
        with open("models/artifacts/model_info_acidez.json", "r") as f:
            model_info = json.load(f)
        with open("models/artifacts/metrics_acidez.json", "r") as f:
            metrics = json.load(f)
        acidez_media = metrics['test']['mean'] if 'mean' in metrics['test'] else 0
        fecha_entrenamiento = model_info.get('training_date', 'N/A')[:10]
        with st.expander("‚ÑπÔ∏è Informaci√≥n del Modelo"):
            st.markdown(f"""
            **Modelo Random Forest:**
            - **Fecha de entrenamiento:** {fecha_entrenamiento}
            - **Precisi√≥n (R¬≤):** {metrics['test']['r2']:.1%}
            - **Error promedio:** {metrics['test']['mae']:.3f} mg KOH/g
            - **Valor medio hist√≥rico:** {2.76:.2f} mg KOH/g
            
            **Importancia de Variables:**
            - **GDC (T√©rmico):** {model_info['feature_importance']['gdc_mean_in']:.1%}
            - **GDH (Hongos):** {model_info['feature_importance']['gdh_mean_in']:.1%}
            """)
    except Exception:
        st.warning("No se pudo cargar la informaci√≥n del modelo.")

else:
    st.error("‚ùå No se pudo cargar el modelo. Verifique que el archivo `models/artifacts/random_forest_acidez.pkl` existe.")

# Mostrar an√°lisis detallado si hay resultado (fuera de las columnas)
if 'acidez_resultado' in st.session_state:
    st.markdown("---")
    st.header("üìä An√°lisis Detallado")
    
    resultado = st.session_state.acidez_resultado
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Posici√≥n en la Distribuci√≥n")
        
        # Crear gr√°fico de distribuci√≥n con el punto actual
        fig_dist = go.Figure()
        
        # Histograma de datos hist√≥ricos
        fig_dist.add_trace(go.Histogram(
            x=df_acidez_data['pct_oil_acidez_mean'],
            name='Datos Hist√≥ricos',
            marker_color=CORPORATE_COLORS["verde_claro"],
            opacity=1,
            nbinsx=30
        ))
        
        # L√≠nea de media
        fig_dist.add_vline(
            x=resultado['media'],
            line_dash="dash",
            line_color="blue",
            annotation_text=f"Media: {resultado['media']:.2f}",
            annotation_position="top right",
            annotation=dict(font=dict(color="#1A494C"))
        )
        
        # Punto actual
        fig_dist.add_vline(
            x=resultado['predicha'],
            line_dash="solid",
            line_color="red",
            line_width=3,
            annotation_text=f"Predicci√≥n: {resultado['predicha']:.2f}",
            annotation_position="bottom left",
            annotation=dict(font=dict(color="#1A494C"))
        )
        
        fig_dist.update_layout(
            title="Distribuci√≥n Hist√≥rica de Acidez",
            xaxis_title="Acidez (mg KOH/g)",
            yaxis_title="Frecuencia",
            height=400,
            showlegend=False
        )
        
        st.plotly_chart(fig_dist, use_container_width=True, key="dist_hist")
    
    with col2:
        st.subheader("üìà Comparaci√≥n de Variables")
        
        # Gr√°fico de radar para comparar GDC y GDH
        fig_radar = go.Figure()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=[resultado['gdc'], resultado['gdh']],
            theta=['GDC (T√©rmico)', 'GDH (Hongos)'],
            fill='toself',
            name='Valores Actuales',
            line_color=CORPORATE_COLORS["verde_oscuro"]
        ))
        
        # Valores medios hist√≥ricos
        gdc_medio = df_acidez_data['gdc_mean_in'].mean()
        gdh_medio = df_acidez_data['gdh_mean_in'].mean()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=[gdc_medio, gdh_medio],
            theta=['GDC (T√©rmico)', 'GDH (Hongos)'],
            fill='toself',
            name='Valores Medios',
            line_color=CORPORATE_COLORS["gris_neutro"]
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, max(resultado['gdc'], resultado['gdh'], gdc_medio, gdh_medio) * 1.2]
                )),
            showlegend=True,
            title="Comparaci√≥n con Valores Medios",
            height=400
        )
        
        st.plotly_chart(fig_radar, use_container_width=True, key="radar_comp")
    
    # Tabla de resumen
    st.subheader("üìã Resumen del An√°lisis")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Acidez Predicha",
            f"{resultado['predicha']:.2f} mg KOH/g",
            f"{resultado['diferencia']:+.2f}"
        )
    
    with col2:
        st.metric(
            "Desviaci√≥n",
            f"{resultado['porcentaje']:+.1f}%",
            "vs Media"
        )
    
    with col3:
        # Calcular percentil
        percentil = (df_acidez_data['pct_oil_acidez_mean'] < resultado['predicha']).mean() * 100
        st.metric(
            "Percentil",
            f"{percentil:.0f}%",
            "de la distribuci√≥n"
        )
    
    with col4:
        # Calcular riesgo
        if resultado['predicha'] < 1.0:
            riesgo = "Bajo"
        elif resultado['predicha'] < 2.0:
            riesgo = "Moderado"
        else:
            riesgo = "Alto"
        
        st.metric(
            "Nivel de Riesgo",
            riesgo,
            "Calidad"
        )

st.markdown("---")


# ===== SECCI√ìN 1: EXPLICACI√ìN DEL MODELO =====
st.header("üî¨ Explicaci√≥n del Modelo de Acidez")

# Explicaci√≥n del modelo Random Forest
import json
try:
    with open("models/artifacts/model_info_acidez.json", "r") as f:
        model_info = json.load(f)
    st.markdown("""
    Este modelo utiliza un **Random Forest Regressor**, un conjunto de √°rboles de decisi√≥n entrenados sobre los datos hist√≥ricos de acidez y da√±o del grano.
    
    - **Tipo de modelo:** √Årboles de decisi√≥n en ensamble (Random Forest)
    - **Variables de entrada:**
        - Da√±o t√©rmico del grano (`gdc_mean_in`)
        - Da√±o por hongos (`gdh_mean_in`)
    - **Variable objetivo:** Acidez del aceite (`pct_oil_acidez_mean`)
    - **Hiperpar√°metros principales:**
        - `n_estimators`: {n_estimators}
        - `max_depth`: {max_depth}
        - `min_samples_leaf`: {min_samples_leaf}
        - `min_samples_split`: {min_samples_split}
        - `max_features`: {max_features:.2f}
    
    El modelo aprende reglas a partir de los datos para predecir la acidez esperada seg√∫n el da√±o observado. Puedes ver el √°rbol m√°s representativo a continuaci√≥n.
    """.format(
        n_estimators=model_info['best_params']['n_estimators'],
        max_depth=model_info['best_params']['max_depth'],
        min_samples_leaf=model_info['best_params']['min_samples_leaf'],
        min_samples_split=model_info['best_params']['min_samples_split'],
        max_features=model_info['best_params']['max_features']
    ))
except Exception:
    st.warning("No se pudo cargar la informaci√≥n del modelo.")

# Mostrar reglas del √°rbol m√°s representativo
try:
    with open("models/artifacts/tree_rules_acidez.txt", "r") as f:
        tree_rules = f.read()
    with st.expander("Ver √°rbol m√°s representativo del modelo Random Forest"):
        st.code(tree_rules, language="text")
except FileNotFoundError:
    st.warning("No se encontraron las reglas del √°rbol representativo. Ejecuta el entrenamiento para generarlas.")

# ===== SECCI√ìN 2: GR√ÅFICOS DE ACIDEZ =====
st.header("üìà An√°lisis de Distribuciones de Datos")


st.markdown("""
### 

A continuaci√≥n se muestran las distribuciones de las variables relacionadas con la acidez del aceite, 
basadas en datos reales de an√°lisis de granos de soya:
""")

# Mostrar la imagen generada
try:
    # Leer el archivo HTML
    with open("models/plots/subplot_distribuciones_acidez_oil.html", "r", encoding="utf-8") as f:
        html_content = f.read()
    
    # Mostrar el gr√°fico HTML interactivo
    st.components.v1.html(html_content, height=500)
    st.markdown("""
    **Interpretaci√≥n de las Distribuciones:**
    
    - **GDC (Da√±o T√©rmico)**: Muestra la distribuci√≥n del da√±o t√©rmico en los granos
    - **GDH (Da√±o por Hongos)**: Representa la distribuci√≥n del da√±o causado por hongos
    - **Acidez del Aceite (%)**: Distribuci√≥n de los valores de acidez medidos en el aceite extra√≠do
   
    """)
    
except FileNotFoundError:
    st.warning("‚ö†Ô∏è No se encontr√≥ el archivo HTML de distribuciones. Ejecute el script `models/acidez_oil.py` para generarlo.")
    st.code("source xgboost_env/bin/activate && python models/acidez_oil.py")


       


# ===== SECCI√ìN 6.5: AN√ÅLISIS DEL MODELO ML =====
if model is not None:
    st.header("üîç An√°lisis del Modelo de Machine Learning")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Predicciones vs Valores Reales")
        try:
            components.html(open("models/plots/predicciones_vs_reales_acidez.html").read(), height=500)
        except FileNotFoundError:
            st.warning("Gr√°fico de predicciones no encontrado")
    
    with col2:
        st.subheader("üìà An√°lisis de Residuos")
        try:
            components.html(open("models/plots/residuos_acidez.html").read(), height=400)
        except FileNotFoundError:
            st.warning("Gr√°fico de residuos no encontrado")
    
    # Gr√°ficos SHAP
    st.subheader("üéØ An√°lisis SHAP")
    try:
        st.image("models/artifacts/shap_importance_acidez.png", caption="SHAP Summary Plot - Acidez del Aceite")
    except FileNotFoundError:
        st.warning("Gr√°fico SHAP summary no encontrado")

# ===== SECCI√ìN 7: AN√ÅLISIS Y ARGUMENTACI√ìN CIENT√çFICA =====
st.header("üß™ Entendimiento de los Resultados en Base a la Literatura")

st.subheader("üìö Resumen Bibliogr√°fico")
st.markdown('''
La **acidez del aceite de soya** es un par√°metro clave para evaluar su calidad, estabilidad y aptitud para consumo humano y animal. Numerosas investigaciones cient√≠ficas han evidenciado que:

- El **da√±o en el grano de soya**, ya sea **f√≠sico, t√©rmico o microbiol√≥gico**, acelera la **hidr√≥lisis de triglic√©ridos**, lo cual libera **√°cidos grasos libres** que incrementan la acidez.
- La acidez elevada se asocia con **oxidaci√≥n avanzada**, **rancidez** y p√©rdida del valor comercial del aceite.
- Procesos como el **secado excesivo**, la **extrusi√≥n agresiva**, o **almacenamiento prolongado en malas condiciones** pueden aumentar significativamente este par√°metro.
- Rangos aceptables de acidez para aceites vegetales comestibles, seg√∫n est√°ndares como el **Codex Alimentarius**, est√°n entre **0.1 y 1.0 mg KOH/g**.
- Niveles por encima de **2.0 mg KOH/g** son considerados se√±ales de **degradaci√≥n severa** o **contaminaci√≥n microbiol√≥gica**.

üìñ **Referencias sugeridas:**
- CODEX STAN 210-1999 (Codex Alimentarius ‚Äì Normas para aceites vegetales)
- R. Przybylski et al., "Quality of Soybean Oil: A Review", *Journal of Food Lipids*, 2003.
- J. Rios et al., "Efecto del Almacenamiento y la Humedad sobre la Calidad del Aceite de Soya", *Revista Ciencias Agr√≠colas*, 2017.
''')

st.subheader("üìà Resultados del Modelo")
st.markdown(f'''
Se evalu√≥ una base de datos experimental con las siguientes variables:

- **GDC**: Da√±o t√©rmico del grano (en %).
- **GDH**: Da√±o f√∫ngico (por hongos) del grano (en %).
- **Acidez**: Medida en **mg KOH/g**.

El an√°lisis mostr√≥ una **correlaci√≥n positiva consistente** entre los niveles de da√±o y el valor de acidez del aceite: a mayor da√±o, mayor es la acidez observada.

üìå **Hallazgo cr√≠tico**:
> El valor promedio de acidez en las muestras analizadas fue de **2.76 mg KOH/g**, es decir, **0.76 unidades por encima del umbral m√°ximo sugerido por los est√°ndares internacionales** (2.0 mg KOH/g).

Este resultado evidencia un **nivel significativo de deterioro** en la calidad del aceite producido actualmente.
''')

st.subheader("üîé Interpretaci√≥n T√©cnica y Recomendaciones")
st.markdown('''
Si bien es posible construir **modelos estad√≠sticos o de machine learning m√°s avanzados** para predecir la acidez, estos **no resuelven el problema de fondo**. El modelo puede alertar o estimar la acidez, pero:

> **Una predicci√≥n m√°s precisa no mejora la calidad del producto.**

Por lo tanto, se requiere una **intervenci√≥n directa en la calidad de la materia prima o en las condiciones del proceso**, tales como:

- üü© **Seleccionar soya de mejor calidad**: Menor contenido de humedad, grano m√°s entero, mejor manejado en cosecha.
- üå°Ô∏è **Mejorar el control de temperatura y tiempos de extrusi√≥n**.
- ü¶† **Mitigar la carga microbiana** en almacenamiento usando agentes antif√∫ngicos permitidos o secado m√°s efectivo.
- üõ¢Ô∏è **Optimizar tiempos de almacenamiento del aceite** antes del an√°lisis.

üìå *Conclusi√≥n: mejorar el modelo es √∫til como herramienta de monitoreo, pero **la soluci√≥n real est√° en cambiar las condiciones de entrada y del proceso productivo.***
''')

# Footer
st.markdown("---")
st.markdown("*Modelo de Acidez del Aceite - Soya Insights - Okuo-Analytics - Juan David Rinc√≥n *") 